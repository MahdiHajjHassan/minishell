#include "inc/minishell.h"

int	main(int argc, char **argv, char **envp)
{
	char	**env_copy;

	if (argc != 1)
	{
		ft_putstr_fd("Usage: ./minishell\n", STDERR_FILENO);
		return (1);
	}
	env_copy = copy_environ(envp);
	if (!env_copy)
	{
		ft_putstr_fd("Failed to copy environment\n", STDERR_FILENO);
		return (1);
	}
	setup_signal_handlers();
	run_shell(env_copy);
	clean_exit(env_copy, 0);
	return (0);
}

void	setup_signal_handlers(void)
{
	signal(SIGINT, sigint_handler);
	signal(SIGQUIT, SIG_IGN);
}

void	sigint_handler(int sig)
{
	(void)sig;
	write(STDOUT_FILENO, "\n", 1);
	rl_on_new_line();
	rl_replace_line("", 0);
	rl_redisplay();
}

void	run_shell(char **env_copy)
{
	char	*line;
	char	**tokens;
	t_cmd	*cmd;

	while (1)
	{
		line = readline("minishell$ ");
		if (!line)
			break;
		if (ft_strlen(line) > 0)
			add_history(line);
		tokens = tokenize(line);
		if (tokens)
		{
			cmd = parse(tokens);
			if (cmd)
			{
				execute(cmd, env_copy);
				free_cmd(cmd);
			}
			free_tokens(tokens);
		}
		free(line);
	}
}

char	**tokenize(char *line)
{
	char	**tokens;
	int		i;
	int		j;

	tokens = malloc(sizeof(char *) * (ft_strlen(line) + 1));
	if (!tokens)
		return (NULL);
	i = 0;
	j = 0;
	while (line[i])
	{
		while (line[i] && (line[i] == ' ' || line[i] == '\t'))
			i++;
		if (line[i])
		{
			tokens[j] = extract_token(line, &i);
			if (!tokens[j])
			{
				free_tokens(tokens);
				return (NULL);
			}
			j++;
		}
	}
	tokens[j] = NULL;
	return (tokens);
}

char	*extract_token(char *line, int *i)
{
	int		start;
	int		len;
	char	*token;

	start = *i;
	if (line[*i] == '"' || line[*i] == '\'')
	{
		*i = skip_quotes(line, *i);
		if (*i == -1)
			return (NULL);
	}
	else
	{
		while (line[*i] && line[*i] != ' ' && line[*i] != '\t')
			(*i)++;
	}
	len = *i - start;
	token = malloc(len + 1);
	if (!token)
		return (NULL);
	ft_strncpy(token, line + start, len);
	token[len] = '\0';
	return (token);
}

int	skip_quotes(char *line, int i)
{
	char	quote;

	quote = line[i];
	i++;
	while (line[i] && line[i] != quote)
		i++;
	if (!line[i])
		return (-1);
	return (i + 1);
}

t_cmd	*parse(char **tokens)
{
	t_cmd	*cmd;
	int		i;

	cmd = create_cmd();
	if (!cmd)
		return (NULL);
	i = 0;
	while (tokens[i])
	{
		if (ft_strcmp(tokens[i], "|") == 0)
		{
			cmd->type = CMD_PIPE;
			cmd->next = parse(tokens + i + 1);
			break;
		}
		else if (ft_strcmp(tokens[i], ">") == 0)
		{
			cmd->type = CMD_REDIR_OUT;
			cmd->redir.file = ft_strdup(tokens[i + 1]);
			break;
		}
		else if (ft_strcmp(tokens[i], "<") == 0)
		{
			cmd->type = CMD_REDIR_IN;
			cmd->redir.file = ft_strdup(tokens[i + 1]);
			break;
		}
		else if (ft_strcmp(tokens[i], ">>") == 0)
		{
			cmd->type = CMD_REDIR_APPEND;
			cmd->redir.file = ft_strdup(tokens[i + 1]);
			break;
		}
		else if (ft_strcmp(tokens[i], "<<") == 0)
		{
			cmd->type = CMD_HEREDOC;
			cmd->heredoc.delimiter = ft_strdup(tokens[i + 1]);
			break;
		}
		else
		{
			cmd->av = add_to_argv(cmd->av, tokens[i]);
		}
		i++;
	}
	return (cmd);
}

t_cmd	*create_cmd(void)
{
	t_cmd	*cmd;

	cmd = malloc(sizeof(t_cmd));
	if (!cmd)
		return (NULL);
	ft_memset(cmd, 0, sizeof(*cmd));
	cmd->type = CMD_EXEC;
	return (cmd);
}

char	**add_to_argv(char **av, char *arg)
{
	int		i;
	char	**new_av;

	i = 0;
	while (av && av[i])
		i++;
	new_av = malloc(sizeof(char *) * (i + 2));
	if (!new_av)
		return (NULL);
	i = 0;
	while (av && av[i])
	{
		new_av[i] = av[i];
		i++;
	}
	new_av[i] = ft_strdup(arg);
	new_av[i + 1] = NULL;
	free(av);
	return (new_av);
}

void	execute(t_cmd *cmd, char **env_copy)
{
	if (cmd->type == CMD_EXEC)
		execute_exec(cmd, env_copy);
	else if (cmd->type == CMD_PIPE)
		execute_pipe(cmd, env_copy);
	else if (cmd->type == CMD_REDIR_OUT)
		execute_redir_out(cmd, env_copy);
	else if (cmd->type == CMD_REDIR_IN)
		execute_redir_in(cmd, env_copy);
	else if (cmd->type == CMD_REDIR_APPEND)
		execute_redir_append(cmd, env_copy);
	else if (cmd->type == CMD_HEREDOC)
		execute_heredoc(cmd, env_copy);
}

void	execute_exec(t_cmd *cmd, char **env_copy)
{
	if (is_builtin(cmd->av[0]))
		execute_builtin(cmd->av, env_copy);
	else
		execute_external(cmd->av, env_copy);
}

void	execute_pipe(t_cmd *cmd, char **env_copy)
{
	int		pipe_fd[2];
	pid_t	pid1, pid2;

	if (pipe(pipe_fd) == -1)
		return;
	pid1 = fork();
	if (pid1 == 0)
	{
		close(pipe_fd[0]);
		dup2(pipe_fd[1], STDOUT_FILENO);
		close(pipe_fd[1]);
		execute(cmd, env_copy);
		exit(0);
	}
	pid2 = fork();
	if (pid2 == 0)
	{
		close(pipe_fd[1]);
		dup2(pipe_fd[0], STDIN_FILENO);
		close(pipe_fd[0]);
		execute(cmd->next, env_copy);
		exit(0);
	}
	close(pipe_fd[0]);
	close(pipe_fd[1]);
	waitpid(pid1, NULL, 0);
	waitpid(pid2, NULL, 0);
}

void	execute_redir_out(t_cmd *cmd, char **env_copy)
{
	int	fd;

	fd = open(cmd->redir.file, O_WRONLY | O_CREAT | O_TRUNC, 0644);
	if (fd == -1)
	{
		ft_fprintf_stderr("open failed: %s: %s\n", cmd->redir.file,
			strerror(errno));
		return;
	}
	dup2(fd, STDOUT_FILENO);
	close(fd);
	execute(cmd, env_copy);
}

void	execute_redir_in(t_cmd *cmd, char **env_copy)
{
	int	fd;

	fd = open(cmd->redir.file, O_RDONLY);
	if (fd == -1)
	{
		ft_fprintf_stderr("open failed: %s: %s\n", cmd->redir.file,
			strerror(errno));
		return;
	}
	dup2(fd, STDIN_FILENO);
	close(fd);
	execute(cmd, env_copy);
}

void	execute_redir_append(t_cmd *cmd, char **env_copy)
{
	int	fd;

	fd = open(cmd->redir.file, O_WRONLY | O_CREAT | O_APPEND, 0644);
	if (fd == -1)
	{
		ft_fprintf_stderr("open failed: %s: %s\n", cmd->redir.file,
			strerror(errno));
		return;
	}
	dup2(fd, STDOUT_FILENO);
	close(fd);
	execute(cmd, env_copy);
}

void	execute_heredoc(t_cmd *cmd, char **env_copy)
{
	int		pipe_fd[2];
	pid_t	pid;

	if (pipe(pipe_fd) == -1)
		return;
	pid = fork();
	if (pid == 0)
	{
		close(pipe_fd[0]);
		write_heredoc_content(pipe_fd[1], cmd->heredoc.delimiter);
		close(pipe_fd[1]);
		exit(0);
	}
	close(pipe_fd[1]);
	dup2(pipe_fd[0], STDIN_FILENO);
	close(pipe_fd[0]);
	waitpid(pid, NULL, 0);
	execute(cmd, env_copy);
}

void	write_heredoc_content(int fd, char *delimiter)
{
	char	*line;
	size_t	delimiter_len;

	delimiter_len = ft_strlen(delimiter);
	while (1)
	{
		line = readline("> ");
		if (!line)
		{
			ft_fprintf_stderr("minishell: warning: here-document delimited by end-of-file (wanted `%s')\n", delimiter);
			break;
		}
		if (ft_strlen(line) == delimiter_len && ft_strncmp(line, delimiter, delimiter_len) == 0)
		{
			free(line);
			break;
		}
		write(fd, line, ft_strlen(line));
		write(fd, "\n", 1);
		free(line);
	}
}

int	is_builtin(char *cmd)
{
	if (!cmd)
		return (0);
	if (!ft_strcmp(cmd, "echo"))
		return (1);
	if (!ft_strcmp(cmd, "cd"))
		return (1);
	if (!ft_strcmp(cmd, "pwd"))
		return (1);
	if (!ft_strcmp(cmd, "export"))
		return (1);
	if (!ft_strcmp(cmd, "unset"))
		return (1);
	if (!ft_strcmp(cmd, "env"))
		return (1);
	if (!ft_strcmp(cmd, "exit"))
		return (1);
	return (0);
}

void	execute_builtin(char **argv, char **env_copy)
{
	if (!ft_strcmp(argv[0], "echo"))
		builtin_echo(argv);
	else if (!ft_strcmp(argv[0], "cd"))
		builtin_cd(argv, env_copy);
	else if (!ft_strcmp(argv[0], "pwd"))
		builtin_pwd();
	else if (!ft_strcmp(argv[0], "export"))
		builtin_export(argv, env_copy);
	else if (!ft_strcmp(argv[0], "unset"))
		builtin_unset(argv, env_copy);
	else if (!ft_strcmp(argv[0], "env"))
		builtin_env(env_copy);
	else if (!ft_strcmp(argv[0], "exit"))
		builtin_exit(argv, env_copy);
}

void	execute_external(char **argv, char **env_copy)
{
	char	*full_path;
	pid_t	pid;

	full_path = find_command(argv[0], env_copy);
	if (!full_path)
	{
		ft_fprintf_stderr("command not found: %s\n", argv[0]);
		return;
	}
	pid = fork();
	if (pid == 0)
	{
		execve(full_path, argv, env_copy);
		ft_fprintf_stderr("execve failed: %s\n", strerror(errno));
		exit(1);
	}
	else
	{
		waitpid(pid, NULL, 0);
	}
	free(full_path);
}

char	*find_command(char *cmd, char **env_copy)
{
	char	*path;
	char	**path_dirs;
	char	*full_path;
	int		i;

	if (ft_strchr(cmd, '/'))
		return (ft_strdup(cmd));
	path = get_env_value("PATH", env_copy);
	if (!path)
		return (NULL);
	path_dirs = ft_split(path, ':');
	if (!path_dirs)
		return (NULL);
	i = 0;
	while (path_dirs[i])
	{
		full_path = check_path(path_dirs[i], cmd);
		if (full_path)
		{
			free_tokens(path_dirs);
			return (full_path);
		}
		i++;
	}
	free_tokens(path_dirs);
	return (NULL);
}

char	*check_path(char *dir, char *cmd)
{
	char	full_path[PATH_MAX];
	size_t	len;

	len = ft_strlen(dir);
	if (len + ft_strlen(cmd) + 2 > PATH_MAX)
	{
		ft_fprintf_stderr("Path too long: %.*s/%s\n", (int)len, dir, cmd);
		return (NULL);
	}
	ft_strncpy(full_path, dir, len);
	full_path[len] = '/';
	ft_strcpy(full_path + len + 1, cmd);
	if (access(full_path, X_OK) == 0)
		return (ft_strdup(full_path));
	return (NULL);
}

void	builtin_echo(char **argv)
{
	int	i;
	int	n_flag;

	i = 1;
	n_flag = 0;
	while (argv[i] && !ft_strcmp(argv[i], "-n"))
	{
		n_flag = 1;
		i++;
	}
	while (argv[i])
	{
		ft_putstr_fd(argv[i], STDOUT_FILENO);
		if (argv[i + 1])
			ft_putstr_fd(" ", STDOUT_FILENO);
		i++;
	}
	if (!n_flag)
		ft_putstr_fd("\n", STDOUT_FILENO);
}

void	builtin_cd(char **argv, char **env_copy)
{
	char	*home;
	char	*old_pwd;

	if (!argv[1] || !ft_strcmp(argv[1], "~"))
	{
		home = get_env_value("HOME", env_copy);
		if (!home)
		{
			ft_fprintf_stderr("minishell: cd: HOME not set\n");
			return;
		}
		if (chdir(home) == -1)
		{
			ft_fprintf_stderr("minishell: cd: %s: %s\n", home, strerror(errno));
			return;
		}
	}
	else
	{
		if (chdir(argv[1]) == -1)
		{
			ft_fprintf_stderr("minishell: cd: %s: %s\n",
				argv[1], strerror(errno));
			return;
		}
	}
	old_pwd = get_env_value("PWD", env_copy);
	if (old_pwd)
		ft_setenv("OLDPWD", old_pwd, 1);
	ft_setenv("PWD", getcwd(NULL, 0), 1);
}

void	builtin_pwd(void)
{
	char	*cwd;

	cwd = getcwd(NULL, 0);
	if (cwd)
	{
		ft_putstr_fd(cwd, STDOUT_FILENO);
		ft_putstr_fd("\n", STDOUT_FILENO);
		free(cwd);
	}
}

void	builtin_export(char **argv, char **env_copy)
{
	int		i;
	char	*equals;
	char	*name;
	char	*value;

	if (!argv[1])
	{
		print_env_vars(env_copy);
		return;
	}
	i = 1;
	while (argv[i])
	{
		equals = ft_strchr(argv[i], '=');
		if (equals)
		{
			*equals = '\0';
			name = argv[i];
			value = equals + 1;
			if (!is_valid_identifier(name))
			{
				ft_fprintf_stderr("minishell: export: `%s': not a valid identifier\n", argv[i]);
				i++;
				continue;
			}
			ft_setenv(name, value, 1);
		}
		i++;
	}
}

void	builtin_unset(char **argv, char **env_copy)
{
	int	i;

	i = 1;
	while (argv[i])
	{
		if (ft_unsetenv(argv[i]) != 0)
		{
			ft_fprintf_stderr("minishell: unset: `%s': not a valid identifier\n", argv[i]);
		}
		i++;
	}
}

void	builtin_env(char **env_copy)
{
	int	i;

	i = 0;
	while (env_copy[i])
	{
		ft_putstr_fd(env_copy[i], STDOUT_FILENO);
		ft_putstr_fd("\n", STDOUT_FILENO);
		i++;
	}
}

void	builtin_exit(char **argv, char **env_copy)
{
	int	status;

	if (!argv[1])
	{
		ft_putstr_fd("exit\n", STDOUT_FILENO);
		clean_exit(env_copy, 0);
	}
	if (!is_numeric(argv[1]))
	{
		ft_fprintf_stderr("minishell: exit: ", STDERR_FILENO);
		ft_fprintf_stderr(argv[1], STDERR_FILENO);
		ft_fprintf_stderr(": numeric argument required\n", STDERR_FILENO);
		clean_exit(env_copy, 255);
	}
	status = ft_atoi(argv[1]);
	if (argv[2])
	{
		ft_fprintf_stderr("minishell: exit: too many arguments\n", STDERR_FILENO);
		return;
	}
	ft_putstr_fd("exit\n", STDOUT_FILENO);
	clean_exit(env_copy, status);
}

int	is_numeric(char *str)
{
	int	i;

	i = 0;
	while (str[i])
	{
		if (!ft_isdigit(str[i]))
			return (0);
		i++;
	}
	return (1);
}

void	print_env_vars(char **env_copy)
{
	int	i;

	i = 0;
	while (env_copy[i])
	{
		ft_putstr_fd("declare -x ", STDOUT_FILENO);
		ft_putstr_fd(env_copy[i], STDOUT_FILENO);
		ft_putstr_fd("\n", STDOUT_FILENO);
		i++;
	}
}

int	is_valid_identifier(char *name)
{
	int	i;

	if (!name || !ft_isalpha(name[0]) && name[0] != '_')
		return (0);
	i = 1;
	while (name[i])
	{
		if (!ft_isalnum(name[i]) && name[i] != '_')
			return (0);
		i++;
	}
	return (1);
}

char	*get_env_value(char *name, char **env_copy)
{
	int		i;
	size_t	name_len;

	if (!name || !env_copy)
		return (NULL);
	name_len = ft_strlen(name);
	i = 0;
	while (env_copy[i])
	{
		if (ft_strncmp(env_copy[i], name, name_len) == 0 && env_copy[i][name_len] == '=')
			return (env_copy[i] + name_len + 1);
		i++;
	}
	return (NULL);
}

void	free_cmd(t_cmd *cmd)
{
	if (!cmd)
		return;
	if (cmd->av)
		free_tokens(cmd->av);
	if (cmd->redir.file)
		free(cmd->redir.file);
	if (cmd->heredoc.delimiter)
		free(cmd->heredoc.delimiter);
	if (cmd->next)
		free_cmd(cmd->next);
	free(cmd);
}

void	free_tokens(char **tokens)
{
	int	i;

	if (!tokens)
		return;
	i = 0;
	while (tokens[i])
	{
		free(tokens[i]);
		i++;
	}
	free(tokens);
}

char	**copy_environ(char **envp)
{
	char	**new_environ;
	int		i;
	int		count;

	count = 0;
	while (envp[count])
		count++;
	new_environ = malloc(sizeof(char *) * (count + 1));
	if (!new_environ)
		return (NULL);
	i = 0;
	while (envp[i])
	{
		new_environ[i] = ft_strdup(envp[i]);
		if (!new_environ[i])
		{
			free_environ_copy(new_environ);
			return (NULL);
		}
		i++;
	}
	new_environ[i] = NULL;
	return (new_environ);
}

void	free_environ_copy(char **env_copy)
{
	int	i;

	if (!env_copy)
		return;
	i = 0;
	while (env_copy[i])
	{
		free(env_copy[i]);
		i++;
	}
	free(env_copy);
}

void	clean_exit(char **env_copy, int status)
{
	free_environ_copy(env_copy);
	exit(status);
}

int	ft_strlen(const char *s)
{
	int	len;

	len = 0;
	while (s[len])
		len++;
	return (len);
}

char	*ft_strdup(const char *s)
{
	char	*dup;
	int		i;

	if (!s)
		return (NULL);
	dup = malloc(ft_strlen(s) + 1);
	if (!dup)
		return (NULL);
	i = 0;
	while (s[i])
	{
		dup[i] = s[i];
		i++;
	}
	dup[i] = '\0';
	return (dup);
}

char	*ft_strchr(const char *s, int c)
{
	while (*s)
	{
		if (*s == (char)c)
			return ((char *)s);
		s++;
	}
	if (c == 0)
		return ((char *)s);
	return (NULL);
}

void	*ft_memset(void *b, int c, size_t len)
{
	unsigned char	*ptr;

	ptr = (unsigned char *)b;
	while (len--)
		*ptr++ = (unsigned char)c;
	return (b);
}

void	*ft_memcpy(void *dst, const void *src, size_t n)
{
	unsigned char	*d;
	unsigned char	*s;

	if (!dst && !src)
		return (NULL);
	d = (unsigned char *)dst;
	s = (unsigned char *)src;
	while (n--)
		*d++ = *s++;
	return (dst);
}

int	ft_isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

int	ft_isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

int	ft_isalnum(int c)
{
	return (ft_isalpha(c) || ft_isdigit(c));
}

char	*ft_strjoin(char const *s1, char const *s2)
{
	char	*result;
	int		i;
	int		j;

	if (!s1 || !s2)
		return (NULL);
	result = malloc(ft_strlen(s1) + ft_strlen(s2) + 1);
	if (!result)
		return (NULL);
	i = 0;
	while (s1[i])
	{
		result[i] = s1[i];
		i++;
	}
	j = 0;
	while (s2[j])
	{
		result[i + j] = s2[j];
		j++;
	}
	result[i + j] = '\0';
	return (result);
}

int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	while (n-- && *s1 && *s2)
	{
		if (*s1 != *s2)
			return ((unsigned char)*s1 - (unsigned char)*s2);
		s1++;
		s2++;
	}
	if (n == (size_t)-1)
		return (0);
	return ((unsigned char)*s1 - (unsigned char)*s2);
}

int	ft_atoi(const char *nptr)
{
	int	result;
	int	sign;

	result = 0;
	sign = 1;
	while (*nptr == ' ' || (*nptr >= 9 && *nptr <= 13))
		nptr++;
	if (*nptr == '-' || *nptr == '+')
	{
		if (*nptr == '-')
			sign = -1;
		nptr++;
	}
	while (*nptr >= '0' && *nptr <= '9')
	{
		result = result * 10 + (*nptr - '0');
		nptr++;
	}
	return (result * sign);
}

void	*ft_calloc(size_t nmemb, size_t size)
{
	void	*ptr;
	size_t	total_size;

	total_size = nmemb * size;
	if (nmemb && total_size / nmemb != size)
		return (NULL);
	ptr = malloc(total_size);
	if (ptr)
		ft_memset(ptr, 0, total_size);
	return (ptr);
}

void	ft_bzero(void *s, size_t n)
{
	ft_memset(s, 0, n);
}

char	*ft_itoa(int n)
{
	char	*str;
	int		len;
	int		temp;
	int		is_negative;

	if (n == 0)
		return (ft_strdup("0"));
	is_negative = (n < 0);
	temp = n;
	len = 1;
	while (temp /= 10)
		len++;
	if (is_negative)
		len++;
	str = malloc(len + 1);
	if (!str)
		return (NULL);
	str[len] = '\0';
	if (is_negative)
	{
		str[0] = '-';
		n = -n;
	}
	while (len > (is_negative ? 1 : 0))
	{
		str[--len] = '0' + (n % 10);
		n /= 10;
	}
	return (str);
}

size_t	ft_strlcat(char *dst, const char *src, size_t size)
{
	size_t	dst_len;
	size_t	src_len;
	size_t	i;

	dst_len = ft_strlen(dst);
	src_len = ft_strlen(src);
	if (size <= dst_len)
		return (size + src_len);
	i = 0;
	while (src[i] && dst_len + i < size - 1)
	{
		dst[dst_len + i] = src[i];
		i++;
	}
	dst[dst_len + i] = '\0';
	return (dst_len + src_len);
}

void	ft_putstr_fd(char *s, int fd)
{
	if (!s)
		return;
	write(fd, s, ft_strlen(s));
}

int	ft_strcmp(const char *s1, const char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	return ((unsigned char)*s1 - (unsigned char)*s2);
}

int	ft_snprintf(char *str, size_t size, const char *format, ...)
{
	va_list	args;
	int		result;

	va_start(args, format);
	result = ft_vsnprintf(str, size, format, args);
	va_end(args);
	return (result);
}

int	ft_vsnprintf(char *str, size_t size, const char *format, va_list args)
{
	int		num;
	char	*num_str;

	if (ft_strcmp(format, "%d") == 0)
	{
		num = va_arg(args, int);
		num_str = ft_itoa(num);
		if (num_str)
		{
			ft_strncpy(str, num_str, size - 1);
			str[size - 1] = '\0';
			free(num_str);
			return (ft_strlen(str));
		}
	}
	return (0);
}

void	*ft_realloc(void *ptr, size_t size)
{
	void	*new_ptr;

	if (!ptr)
		return (malloc(size));
	if (size == 0)
	{
		free(ptr);
		return (NULL);
	}
	new_ptr = malloc(size);
	if (!new_ptr)
		return (NULL);
	ft_memcpy(new_ptr, ptr, size);
	free(ptr);
	return (new_ptr);
}

char	*ft_strncpy(char *dest, const char *src, size_t n)
{
	size_t	i;

	i = 0;
	while (i < n && src[i])
	{
		dest[i] = src[i];
		i++;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}

char	*ft_strcpy(char *dest, const char *src)
{
	int	i;

	i = 0;
	while (src[i])
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}

int	ft_fflush_stdout(void)
{
	return (fflush(stdout));
}

int	ft_fprintf_stderr(const char *format, ...)
{
	va_list	args;
	char	buffer[1024];
	int		len;

	va_start(args, format);
	len = ft_vsnprintf(buffer, sizeof(buffer), format, args);
	va_end(args);
	write(STDERR_FILENO, buffer, len);
	return (len);
}

int	ft_setenv(const char *name, const char *value, int overwrite)
{
	int		i;
	size_t	name_len;
	char	*new_var;

	if (!name || !*name || ft_strchr(name, '='))
		return (-1);
	name_len = ft_strlen(name);
	i = 0;
	while (environ[i])
	{
		if (ft_strncmp(environ[i], name, name_len) == 0 && environ[i][name_len] == '=')
		{
			if (overwrite)
			{
				new_var = malloc(ft_strlen(name) + ft_strlen(value) + 2);
				if (!new_var)
					return (-1);
				ft_strcpy(new_var, name);
				ft_strlcat(new_var, "=", ft_strlen(name) + 2);
				ft_strlcat(new_var, value, ft_strlen(name) + ft_strlen(value) + 2);
				free(environ[i]);
				environ[i] = new_var;
			}
			return (0);
		}
		i++;
	}
	new_var = malloc(ft_strlen(name) + ft_strlen(value) + 2);
	if (!new_var)
		return (-1);
	ft_strcpy(new_var, name);
	ft_strlcat(new_var, "=", ft_strlen(name) + 2);
	ft_strlcat(new_var, value, ft_strlen(name) + ft_strlen(value) + 2);
	environ[i] = new_var;
	environ[i + 1] = NULL;
	return (0);
}

int	ft_unsetenv(const char *name)
{
	int		i;
	size_t	name_len;

	if (!name || !*name || ft_strchr(name, '='))
		return (-1);
	name_len = ft_strlen(name);
	i = 0;
	while (environ[i])
	{
		if (ft_strncmp(environ[i], name, name_len) == 0 && environ[i][name_len] == '=')
		{
			free(environ[i]);
			while (environ[i + 1])
			{
				environ[i] = environ[i + 1];
				i++;
			}
			environ[i] = NULL;
			return (0);
		}
		i++;
	}
	return (0);
}

CC = gcc
CFLAGS = -Wall -Wextra -Werror -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600

NAME = minishell

SRC_DIR = src
INC_DIR = inc
LIBFT_DIR = inc/libft
OBJ_DIR = obj

SRCS = $(wildcard $(SRC_DIR)/*.c)
OBJS = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(SRCS))

all: $(NAME)

$(NAME): $(OBJS) $(LIBFT_DIR)/libft.a
	$(CC) $(CFLAGS) -I$(INC_DIR) -I$(LIBFT_DIR) -o $@ $(OBJS) -L$(LIBFT_DIR) -lft -lreadline

# General rule for object files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c | $(OBJ_DIR)
	$(CC) $(CFLAGS) -I$(INC_DIR) -I$(LIBFT_DIR) -c $< -o $@

$(OBJ_DIR):
	mkdir -p $(OBJ_DIR)

$(LIBFT_DIR)/libft.a:
	$(MAKE) -C $(LIBFT_DIR)

clean:
	rm -f $(OBJ_DIR)/*.o
	$(MAKE) -C $(LIBFT_DIR) clean

fclean: clean
	rm -f $(NAME)
	$(MAKE) -C $(LIBFT_DIR) fclean

re: fclean all

.PHONY: all clean fclean re
